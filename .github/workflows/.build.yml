# reusable workflow
name: .build

on:
  workflow_call:
    inputs:
      target:
        type: string
        required: true
      release:
        type: boolean
        required: false
        default: false
      qemu_repo:
        type: string
        required: false
      qemu_ref:
        type: string
        required: false
      qemu_version:
        type: string
        required: false
      latest:
        type: boolean
        required: false
        default: false
      dry-run:
        type: boolean
        required: false
        default: true

env:
  REPO_SLUG: tonistiigi/binfmt
  CACHE_GHA_SCOPE: binfmt

jobs:
  prepare:
    runs-on: ubuntu-24.04
    outputs:
      matrix: ${{ steps.platforms.outputs.matrix }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Prepare
        run: |
          if [ "${{ inputs.target }}" = "mainline" ]; then
            tagPrefix=qemu-
          else
            tagPrefix=${{ inputs.target }}-
          fi
          echo "TAG_PREFIX=${tagPrefix}" >>${GITHUB_ENV}
      -
        name: Create matrix
        id: platforms
        run: |
          echo "matrix=$(docker buildx bake ${{ inputs.target }}-all --print | jq -cr '.target."${{ inputs.target }}-all".platforms')" >>${GITHUB_OUTPUT}
      -
        name: Show matrix
        run: |
          echo ${{ steps.platforms.outputs.matrix }}
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REPO_SLUG }}
          tags: |
            type=ref,event=branch,enable=${{ inputs.target == 'mainline' }},enable=${{ ! inputs.release }}
            type=ref,event=branch,prefix=${{ inputs.target }}-,enable=${{ ! inputs.release && inputs.target != 'mainline' }}
            type=raw,value=${{ env.TAG_PREFIX }}${{ inputs.qemu_version }}-${{ github.run_number }},enable=${{ inputs.release }}
            type=raw,value=${{ env.TAG_PREFIX }}${{ inputs.qemu_version }},enable=${{ inputs.release }}
            type=raw,value=${{ env.TAG_PREFIX }}latest,enable=${{ inputs.release && inputs.target != 'mainline' && inputs.latest }}
            type=raw,value=latest,enable=${{ inputs.release && inputs.target == 'mainline' && inputs.latest }}
          flavor: |
            latest=false
          labels: |
            org.opencontainers.image.title=Binfmt
            org.opencontainers.image.description=Cross-platform emulator collection distributed with Docker images
          bake-target: meta-helper
      -
        name: Rename meta bake definition file
        run: |
          mv "${{ steps.meta.outputs.bake-file }}" "${{ runner.temp }}/bake-meta.json"
      -
        name: Upload meta bake definition
        uses: actions/upload-artifact@v4
        with:
          name: bake-meta-${{ inputs.target }}
          path: ${{ runner.temp }}/bake-meta.json
          if-no-files-found: error
          retention-days: 1

  build:
    runs-on: ubuntu-24.04
    needs:
      - prepare
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.prepare.outputs.matrix) }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Prepare
        run: |
          platform=${{ matrix.platform }}
          qemuRepo=$(docker buildx bake --print ${{ inputs.target }} | jq --raw-output '.. | .args?.QEMU_REPO | select(.)')
          if [ "${{ inputs.qemu_repo }}" != "" ]; then
            qemuRepo=${{ inputs.qemu_repo }}
          fi
          qemuVersion=$(docker buildx bake --print ${{ inputs.target }} | jq --raw-output '.. | .args?.QEMU_VERSION | select(.)')
          if [ "${{ inputs.qemu_ref }}" != "" ]; then
            qemuVersion=${{ inputs.qemu_ref }}
          fi
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
          echo "QEMU_REPO=${qemuRepo}" >>${GITHUB_ENV}
          echo "QEMU_VERSION=${qemuVersion}" >>${GITHUB_ENV}
      -
        name: Download meta bake definition
        uses: actions/download-artifact@v4
        with:
          name: bake-meta-${{ inputs.target }}
          path: ${{ runner.temp }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config: .github/buildkit.toml
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          image: ${{ env.REPO_SLUG }}:master
      -
        name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERIO_USERNAME }}
          password: ${{ secrets.DOCKERIO_PASSWORD }}
      -
        name: Build image
        id: bake-image
        uses: docker/bake-action@v5
        with:
          files: |
            ./docker-bake.hcl
            ${{ steps.meta.outputs.bake-file }}
          targets: ${{ inputs.target }}-all
          set: |
            *.tags=
            *.platform=${{ matrix.platform }}
            *.output=type=image,"name=${{ env.REPO_SLUG }}",push-by-digest=true,name-canonical=true,push=${{ github.event_name != 'pull_request' }}
            *.cache-from=type=gha,scope=${{ env.CACHE_GHA_SCOPE }}-${{ inputs.target }}-${{ env.PLATFORM_PAIR }}
            *.cache-from=type=gha,scope=${{ env.CACHE_GHA_SCOPE }}-${{ inputs.target }}
            *.cache-to=type=gha,scope=${{ env.CACHE_GHA_SCOPE }}-${{ inputs.target }}-${{ env.PLATFORM_PAIR }},mode=max
      -
        name: Export image digest
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const digestsDir = '${{ runner.temp }}/digests';
            if (!fs.existsSync(digestsDir)) {
              fs.mkdirSync(digestsDir, { recursive: true });
            }
            const metadata = JSON.parse(process.env.BAKE_METADATA);
            const digest = metadata[`${{ inputs.target }}-all`]['containerimage.digest'];
            const digestFile = path.join(digestsDir, digest.replace('sha256:', ''));
            fs.closeSync(fs.openSync(digestFile, 'w'));
        env:
          BAKE_METADATA: ${{ steps.bake-image.outputs.metadata }}
      -
        name: Upload image digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ inputs.target }}-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1
      -
        name: Build artifact
        uses: docker/bake-action@v5
        if: inputs.target == 'mainline'
        with:
          files: |
            ./docker-bake.hcl
            ${{ steps.meta.outputs.bake-file }}
          targets: archive-all
          set: |
            *.platform=${{ matrix.platform }}
            *.cache-from=type=gha,scope=${{ env.CACHE_GHA_SCOPE }}-${{ inputs.target }}-${{ env.PLATFORM_PAIR }}
            *.cache-from=type=gha,scope=${{ env.CACHE_GHA_SCOPE }}-${{ inputs.target }}
            *.output=type=local,dest=./bin
      -
        name: Upload artifact
        uses: actions/upload-artifact@v4
        if: inputs.target == 'mainline'
        with:
          name: artifacts-${{ env.PLATFORM_PAIR }}
          path: bin/*.tar.gz
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-24.04
    if: github.event_name != 'pull_request'
    needs:
      - build
    steps:
      -
        name: Download meta bake definition
        uses: actions/download-artifact@v4
        with:
          name: bake-meta-${{ inputs.target }}
          path: ${{ runner.temp }}
      -
        name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-${{ inputs.target }}-*
          merge-multiple: true
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERIO_USERNAME }}
          password: ${{ secrets.DOCKERIO_PASSWORD }}
      -
        name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.target."meta-helper".tags | map(select(startswith("${{ env.REPO_SLUG }}")) | "-t " + .) | join(" ")' ${{ runner.temp }}/bake-meta.json) \
            $(printf '${{ env.REPO_SLUG }}@sha256:%s ' *)
      -
        name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REPO_SLUG }}:$(jq -r '.target."meta-helper".args.DOCKER_META_VERSION' ${{ runner.temp }}/bake-meta.json)

  release:
    runs-on: ubuntu-24.04
    needs:
      - build
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Download meta bake definition
        uses: actions/download-artifact@v4
        with:
          name: bake-meta-${{ inputs.target }}
          path: ${{ runner.temp }}
      -
        name: Download artifacts
        uses: actions/download-artifact@v4
        if: inputs.target == 'mainline'
        with:
          path: ${{ runner.temp }}/artifacts
          pattern: artifacts-*
          merge-multiple: true
      -
        name: List artifacts
        if: inputs.target == 'mainline'
        run: |
          tree -nh "${{ runner.temp }}/artifacts"
      -
        name: Prepare release
        run: |
          if [ "${{ inputs.target }}" = "mainline" ]; then
            gitTag=deploy/${{ inputs.qemu_version }}-${{ github.run_number }}
          else
            gitTag=${{ inputs.target }}/${{ inputs.qemu_version }}-${{ github.run_number }}
          fi
          qemuRepo=$(docker buildx bake --print ${{ inputs.target }} | jq --raw-output '.. | .args?.QEMU_REPO | select(.)')
          if [ "${{ inputs.qemu_repo }}" != "" ]; then
            qemuRepo=${{ inputs.qemu_repo }}
          fi
          qemuRef=$(docker buildx bake --print ${{ inputs.target }} | jq --raw-output '.. | .args?.QEMU_VERSION | select(.)')
          if [ "${{ inputs.qemu_ref }}" != "" ]; then
            qemuRef=${{ inputs.qemu_ref }}
          fi
          echo "QEMU_REPO=${qemuRepo}" >>${GITHUB_ENV}
          echo "QEMU_REF=${qemuRef}" >>${GITHUB_ENV}
          echo "GIT_TAG=${gitTag}" >>${GITHUB_ENV}
          echo "IMAGE_TAG=$(jq -r '.target."meta-helper".args.DOCKER_META_VERSION' ${{ runner.temp }}/bake-meta.json)" >>${GITHUB_ENV}
      -
        name: Create Release
        uses: softprops/action-gh-release@da05d552573ad5aba039eaac05058a918a7bf631  # v2.2.2
        if: ${{ inputs.release && ! inputs.dry-run }}
        with:
          name: ${{ env.GIT_TAG }}
          tag_name: ${{ env.GIT_TAG }}
          prerelease: ${{ ! inputs.latest }}
          files: ${{ runner.temp }}/artifacts/*.tar.gz
          fail_on_unmatched_files: false
          target_commitish: ${{ github.sha }}
          body: |
            ```
            docker run --privileged --rm ${{ env.REPO_SLUG }}:${{ env.IMAGE_TAG }} --uninstall qemu-*
            docker run --privileged --rm ${{ env.REPO_SLUG }}:${{ env.IMAGE_TAG }} --install all
            ```
            
            * logs: ${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}
            * qemu repo: ${{ env.QEMU_REPO }}/tree/${{ env.QEMU_REF }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
